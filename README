Linefold - Unicode Line Breaking Package.

Copyright (C) 2006 by Hatuka*nezumi - IKEDA Soji.  All rights reserved.

This file is part of the Linefold Package.  This program is free
software; you can redistribute it and/or modify it under the terms of
the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any
later version.  This program is distributed in the hope that it will
be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
COPYING file for more details.

$Id$


Install
=======

$ ./configure [options...]
$ make
# make install


linefold Library API
====================

1. Header

#include <linefold.h>

2. Public functions

struct linefold_info *
linefold_alloc(const linefold_char *text, size_t textlen,
	       linefold_lbprop_funcptr
	       (*find_lbprop_func)(const char *, linefold_flags),
	       void (*tailor_lbprop)(linefold_char,
				     linefold_width *, linefold_class *,
				     linefold_flags),
	       const char *chset, linefold_flags flags);

    This function allocates line breaking information for given unicode
    text.

    Arguments:
        text:
                Text to be broken.  This is array of Unicode ordinal
                numbers.
        textlen:
                Length of `text'.
        find_lbprop_func:
                Function to get a function that get character properties
                of unicode character.  If NULL is specified, built-in
                function will be used (see Customization section).
        tailor_lbprop:
                Function to tailor character property.  If NULL is specified,
                built-in function will be used (see Customization section).
        chset:
                Character set context.  This is fed to find_lbprop_func(),
                and may referred through `lbinfo' argument fed to
                is_line_exceeded() and writeout_cb().
        flags:
                Bitwise options to customize behavior of line breaking
                (see Option Flags section).

    Return value:
        Pointer to allocated `struct linefold_info' data, line breaking
        informations for `text'.  If `text' is NULL, length of `text' is
        zero, or any error occur, NULL will be returned.

void
linefold_free(struct linefold_info *lbinfo);

    This function frees storage allocated by linefold_alloc().

linefold_action
linefold(struct linefold_info *lbinfo, linefold_char *text,
	 int (*is_line_exceeded)(const struct linefold_info *,
				 const linefold_char *,
				 size_t, size_t, size_t, void *),
	 void (*writeout_cb)(const struct linefold_info *,
			     const linefold_char *,
			     size_t, size_t, linefold_action, void *),
	 size_t maxlen, void *voidarg);

    This function examines line breaking.

    Arguments:
        lbinfo:
                Line breaking information of `text'.
        text:
                Array of unicode character to be broken.
        is_line_exceeded:
                Function to determine whether length of a text fragment
                exceeds the limit specified by `maxlen'.  If NULL is
                specified, built-in function will be used.
        writeout_cb:
                Callback function to write out each broken lines (see
                below).  If NULL is specified, linefold() will search
                optimum line breaking points over `text' but never output
                anything.
        maxlen:
                Limit of line length.
        voidarg:
                A pointer to custom data structure passed to
                is_line_exceeded() and writeout_cb().  If you don't need
                custom data, set this NULL.

    Return value:
        LINEFOLD_ACTION_NOMOD:
                No breaks or only explicit break(s) have occured.
        LINEFOLD_ACTION_INDIRECT:
                Indirect break(s) have occured, but no direct breaks.
        LINEFOLD_ACTION_DIRECT:
                Direct break(s) have occured, and possiblly Indirect
                breaks also.

    Callback functions:
        void
        writeout_cb(const struct linefold_info *lbinfo,
		    const linefold_char *text,
		    size_t start, size_t size, linefold_action action,
		    void *voidarg);

        This function is called by linefold() when breaking point is found
        then something to output exists.

        Arguments:
            lbinfo:
                    Line breaking informations.
            text:
                    Array of unicode character.
            start:
                    Offset of text fragment to output.
            size:
                    Length of text fragment to output.
            action:
                    Type of line breaking behavior:
                    LINEFOLD_ACTION_EXPLICIT - Explicit break.
                        A mandatory break character or sequence (e.g. LF,
                        CRLF) caused line breaking.
                    LINEFOLD_ACTION_INDIRECT - Indirect break.
                        Breaking occur just after space(s) separating words.
                    LINEFOLD_ACTION_DIRECT - Direct break.
                        Breaking occur just after non-space character.
                    LINEFOLD_ACTION_EOT - End of text.
                        Text fragment is the last line of `text'.
            voidarg:
                    A pointer to custom data structure passed from
                    linefold().

        Note: Terminating newlines and spaces in the text fragments
          will not be trimmed by calling function linefold() (for more
          details see Notes section).  Also note that the text may end
          without newline characters, or may end with extra characters
          (e.g. EOF).


Customization
=============

1. Customizing support functins

Following built-in functions may be customized to meet the needs of your
application.

Note: Do not modify built-in support functions contained in linefold.c.
  Otherwise, write new functions then feed them as arguments of
  linefold_alloc() and/or linefold().

Argument 'flags' is bitwise option to customize behavior of these
functions (see Option Flags section).


linefold_lbprop_funcptr
linefold_find_lbprop_func(const char *chset, linefold_flags flags);

        This function find a function to get character property suitable
        for specified character set context `chset'.  If `chset' is NULL,
        length of `chset' is zero or appropriate function has not been
        found, a function linefold_find_lbprop_generic(), supporting
        generic context, should be returned. 

        Return value of this function is a pointer to function with
        following prototype:

	    void
            func(linefold_char c,
		 linefold_width * widthptr, linefold_class * lbcptr);

	Arguments `widthptr' and `lbcptr' are pointers to variable to
        hold width and line breaking class of character c, respectively.

void
linefold_tailor_lbprop(linefold_char c,
		       linefold_width *widthptr, linefold_class *lbcptr,
		       linefold_flags flags);

        This function sets customized width and line breaking class
        information of character c.
        `widthptr' and `lbcptr' are pointer to variables holding width
        and line breaking class.

	Note: When this function is called, lbcptr can hold undocumented
          internal class value.

int
linefold_is_line_exceeded(const struct linefold_info *lbinfo,
			  const linefold_char *text,
			  size_t start, size_t len, size_t maxlen,
			  void *voidarg);

        This function returns boolean value indicating whether width
        (length) of text fragment exceed `maxlen' or not.  `text' is
        buffer containing text fragment to check.  `start' and `textlen'
        are offset on `text' and length of text fragment.

2. Customizing line breaking properties and rules

To customize line breaking classes, character width informations or line
breaking rules built in this software, read mklbproptab.py and relating
Python sources.

Note: linebreaktab.c, linebreaktab.h and linebreakrule.html are 
  generated by mklbproptab.py.  Don't edit these files manually.


Option Flags
============

LINEFOLD_OPTION_GENERIC_WIDTH

  Function: linefold_find_lbprop_func()

  Resolve character width within generic (Unicode) context, even if
  character set context was specified.

LINEFOLD_OPTION_NARROW_LATIN
LINEFOLD_OPTION_NARROW_GREEK
LINEFOLD_OPTION_NARROW_CYRILLIC

  Function: linefold_tailor_lbprop()

  By default, in multibyte character set context, several Latin, Greek
  or Cyrillic letters are treated as Wide.  In some display
  enviroments they are usually rendered as Narrow, even if in
  multibyte context.  Set these options to treat such letters always
  Narrow.

LINEFOLD_OPTION_BREAK_HY

  Function: linefold_tailor_lbprop()

  Set this to allow break after HY (U+002D HYPHEN-MINUS), before AL.
  By default, breaking directly before AL is not allowed.

LINEFOLD_OPTION_BREAK_SOFT_HYPHEN

  Function: linefold_tailor_lbprop()

  Set this to allow break after U+00AD SOFT HYPHEN.  By default, breaking
  directly after soft hyphen is not allowed.

LINEFOLD_OPTION_NOBREAK_FF

  Function: linefold_tailor_lbprop()

  Set this to treat U+000C form feed as CM, not BK.

LINEFOLD_OPTION_NOBREAK_NL

  Function: linefold_tailor_lbprop()

  Set this to treat U+0085 NEL as CM, not BK. [UAX#14]

LINEFOLD_OPTION_NOBREAK_VT

  Function: linefold_tailor_lbprop()

  Set this to treat U+000B vertical tab as CM, not BK. [UAX#14]

LINEFOLD_OPTION_NOHUNG_PUNCT

  Function: linefold_tailor_lbprop()

  Set this to disable "burasage" (hunging punctuation in East Asian
  text).

LINEFOLD_OPTION_NOGLUE_PUNCT

  Function: linefold_tailor_lbprop()

  By default, Wide OP/CL characters are treated as if they are a
  Narrow character preceded/followed by SP.  Set this to disable
  such feature.

LINEFOLD_OPTION_IDSP_IS_SP

  Function: linefold_tailor_lbprop()

  By default, IDEOGRAPHIC SPACE is treated as ID.  Set this to treat
  it as SP.

LINEFOLD_OPTION_RELAX_KANA_NS

  Function: linefold_tailor_lbprop()

  By default, small hiragana/katakana and KATAKANA-HIRAGANA PROLONGED
  SIGN are NS.  Set this to treat these characters as ID. [JIS X 4051]

LINEFOLD_OPTION_OPAL_IS_AL

  Function: linefold_tailor_lbprop()

  Set this to treat spanish quotations INVERTED EXCLAMATION MARK and
  INVERTED QUESTION MARK as AL, not OP. [UAX#14]

LINEFOLD_OPTION_NOBREAK_DIRECT

  Function: linefold()

  Set this option to ommit Direct break oppotunities.
  WARNING: This may fold non-alphabetic (or mixed) texts *very* ugrily.

LINEFOLD_OPTION_NOCOMBINE_HANGUL_JAMO

  Function: linefold_is_line_exceeded()

  Set this option not to combine hangul combining jamos (JT, JV, JL)
  when line lengths are determined.

LINEFOLD_OPTION_BREAK_SPCM

  Function: linefold()

  Set this to break SP+CM sequence. [UAX#14]

LINEFOLD_OPTION_FORCE_LINEWIDTH

  Function: linefold()

  Set this option to force break unbreakable text longer than specified
  width.  By default, longer text won't be broken.
  This violate line breaking rules then may cause break within words,
  syllables, characters or on somewhere unpreferred.


Notes
=====

1. Newline characters and sequences

Lines broken by Explicit break oppotunity will end with each of
following characters or sequences:

    U+000A line feed (LF)
    U+000B vertical tab (VT) (optional.  See linefold.h).
    U+000C form feed (FF).
    One or more U+000D carriage return (CR), not followed by LF.
    U+0085 new line function (NEL) (optional.  See linefold.h).
    U+2028 LINE SEPARATOR (LS).
    U+2029 PARAGRAPH SEPARATOR (PS).
    And, one or more CR followed by LF.

2. Long lines

Sometimes lines longer than specified limit can appear in output:

a) Sequence of SPACEs terminating Indirect break or sequences of newline
  (see above) terminating Explicit break won't be trimmed.  Line
  breaking algorithm employed by this module expects that SPACEs or newlines
  at end of line will be handled on application side.

b) Long character sequences in which no line break oppotunities are found,
  for example Aopadotenachoselachogaleokranioleipsanodrimhipotrimmatosilphioparaomelitokatakechymenokichlepikossyphophattoperisteralektryonoptekephalliokigklopeleiolagoiosiraiobaphetraganopterygon.
  If you exactly shouldn't allow such pathological cases, Set
  LINEFOLD_OPTION_FORCE_LINEWIDTH on.

c) Tab stop processing is not supported by this module.  Horizontal tab
  will be always treated as a character with 1 column width.

d) Hunging punctuation ("burasage") in East Asian text.  This will
  exceed up to one character width of limit.  For more detail read
  LineBreak/CharacterProperties.py, section about custom classes ``CLH''
  and ``CLHSP''.  To disable hunging punctuation, set
  LINEFOLD_OPTION_NO_HUNGING_PUNCT on.

e) Similar case; wide closing punctuations containing virtual glue.  They
  may exceed one column width of limit.  For more detail read
  LineBreak/CharacterProperties.py, section about custom classes ``CLSP''
  and ``CLHSP''.  To disable virtual glue of wide closing punctuations, Set
  LINEFOLD_OPTION_WIDE_PUNCT_WITHOUT_GLUE on.

f) Inappropriate assignment of character properties, or possiblly
  any characters not yet covered by this module.  If you found such a case,
  please inform me.


Author
======

Hatuka*nezumi - IKEDA Soji <hatuka@nezumi.nu>.

$$
